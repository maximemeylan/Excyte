add_jitter=T,
labs=c("","","percentage")))
gs_melted
perc_B$prog <- factor(ifelse(rep_data[rownames(perc_B),"Objective Response : réponse complète ou partielle"]==1,"CR_PR","SD_PD"))
perc_B
rep_data[rownames(perc_B),"Objective Response : réponse complète ou partielle"]
rep_data <- as.data.frame(read_excel("/home/maxmey/projects/pbmc_ccRCC/results/validation/IGR_réponses.xlsx"))
found_ids <- sapply(rep_data$init,function(x) grep(pattern = x,x = rownames(perc_B)))
rownames(perc_B)[unlist(found_ids)] <- names(unlist(found_ids))
rownames(perc_B)
rep_data[rownames(perc_B)
rep_data[rownames(perc_B),"Objective Response : réponse complète ou partielle"]
rep_data
rownames(rep_data)<- rep_data$init
found_ids <- sapply(rep_data$init,function(x) grep(pattern = x,x = rownames(perc_B)))
rownames(perc_B)[unlist(found_ids)] <- names(unlist(found_ids))
perc_B$prog <- factor(ifelse(rep_data[rownames(perc_B),"Objective Response : réponse complète ou partielle"]==1,"CR_PR","SD_PD"))
gs_melted <- na.omit(melt_df(perc_B,var_to_group = "prog"))
gs_melted[which(duplicated(gs_melted$value)),"value"] <- jitter(x=gs_melted[which(duplicated(gs_melted$value)),"value"],amount = 0.0000002)
res_PRSDvsPD<- sapply(clusters,function(x) plot_group_boxplot(gs_melted,
variable = x,
violin=T,
hide_test = F,
plot_outlier = T,
title_size = 8,
add_jitter=T,
labs=c("","","percentage")))
pdf(paste0(save_dir,Sys.Date(),"_reponse_",suffix,".pdf"),height=15,width = 15)
marrangeGrob(grobs=res_PRSDvsPD[1,order(unlist(res_PRSDvsPD[2,]))][1:16],nrow=4,ncol=4,top="Progression to phenograph pop")
dev.off()
#run the pipeline
excyte_res_B <- run_excyte(fcs_dir = fcs,channels = channels_to_use,k = 100,downsampling = 100000,downsampling_umap = 1000,method = "umap-learn")
plot_obj <- plot_excyte(excyte_res_B,alpha = 0.6,title="marker")
#plot
pdf(paste0(save_dir,Sys.Date(),"_HEATMAP",suffix,".pdf"),width = 15,height = 7)
heatmap <- plot_cluster_profile_heatmap(phenograph_obj = excyte_res_B$phenograph_obj,
display_marker_names = T,
channels_order = channels_to_use)
heatmap
dev.off()
pdf(paste0(save_dir,Sys.Date(),"_UMAP_CLUSTERS_",suffix,".pdf"),width = 10,height = 9)
plot_obj$umap_phenograph
dev.off()
png(paste0(save_dir,Sys.Date(),"_UMAP_CHANNELS_",suffix,".png"),width = 1200,height = 1200)
grid.arrange(grobs=plot_obj$umap_channels,ncol=3)
dev.off()
pdf(paste0(save_dir,Sys.Date(),"_RIDGES_ClUSTERS_",suffix,".pdf"),width = 12,height = 8)
marrangeGrob(grobs=plot_obj$ridges_clusters,ncol=2,nrow = 2)
dev.off()
pdf(paste0(save_dir,Sys.Date(),"_RIDGES_CHANNELS_",suffix,".pdf"),width = 14,height = 14)
marrangeGrob(grobs=plot_obj$ridges_channels,ncol=2,nrow = 2)
dev.off()
perc_B <- data.frame(excyte_res_B$phenograph_obj$phenograph_percentage)
colnames(perc_B) <- gsub(x = colnames(perc_B),pattern = "C",replacement = "B")
clusters <- colnames(perc_B)
excyte_res_B
excyte_res_B$phenograph_obj$phenograph
excyte_res_B <- readRDS("~/projects/pbmc_ccRCC/results/validation/Bcells/2020-07-01K30_Bcells.rds")
perc_B <- data.frame(excyte_res_B$phenograph_obj$phenograph_percentage)
colnames(perc_B) <- gsub(x = colnames(perc_B),pattern = "C",replacement = "B")
clusters <- colnames(perc_B)
rownames(rep_data)<- rep_data$init
found_ids <- sapply(rep_data$init,function(x) grep(pattern = x,x = rownames(perc_B)))
rownames(perc_B)[unlist(found_ids)] <- names(unlist(found_ids))
perc_B$prog <- factor(ifelse(rep_data[rownames(perc_B),"Objective Response : réponse complète ou partielle"]==1,"CR_PR","SD_PD"))
gs_melted <- na.omit(melt_df(perc_B,var_to_group = "prog"))
gs_melted[which(duplicated(gs_melted$value)),"value"] <- jitter(x=gs_melted[which(duplicated(gs_melted$value)),"value"],amount = 0.0000002)
res_PRSDvsPD<- sapply(clusters,function(x) plot_group_boxplot(gs_melted,
variable = x,
violin=T,
hide_test = F,
plot_outlier = T,
title_size = 8,
add_jitter=T,
labs=c("","","percentage")))
pdf(paste0(save_dir,Sys.Date(),"_reponse_",suffix,".pdf"),height=15,width = 15)
marrangeGrob(grobs=res_PRSDvsPD[1,order(unlist(res_PRSDvsPD[2,]))][1:16],nrow=4,ncol=4,top="Progression to phenograph pop")
dev.off()
excyte_res_B <- readRDS("~/projects/pbmc_ccRCC/results/validation/Bcells/2020-07-01K30_Bcells.rds")
perc_B <- data.frame(excyte_res_B$phenograph_obj$phenograph_percentage)
colnames(perc_B) <- gsub(x = colnames(perc_B),pattern = "C",replacement = "B")
clusters <- colnames(perc_B)
# import clinical data
library(readxl)
rep_data <- as.data.frame(read_excel("/home/maxmey/projects/pbmc_ccRCC/results/validation/IGR_réponses.xlsx"))
rownames(rep_data)<- rep_data$init
found_ids <- sapply(rep_data$init,function(x) grep(pattern = x,x = rownames(perc_B)))
rownames(perc_B)[unlist(found_ids)] <- names(unlist(found_ids))
perc_B$prog <- factor(ifelse(rep_data[rownames(perc_B),"Objective Response : réponse complète ou partielle"]==1,"CR_PR","SD_PD"))
gs_melted <- na.omit(melt_df(perc_B,var_to_group = "prog"))
gs_melted[which(duplicated(gs_melted$value)),"value"] <- jitter(x=gs_melted[which(duplicated(gs_melted$value)),"value"],amount = 0.0000002)
res_PRSDvsPD<- sapply(clusters,function(x) plot_group_boxplot(gs_melted,
variable = x,
violin=T,
hide_test = F,
plot_outlier = T,
title_size = 8,
add_jitter=T,
labs=c("","","percentage")))
pdf(paste0(save_dir,Sys.Date(),"_reponse_",suffix,".pdf"),height=15,width = 15)
marrangeGrob(grobs=res_PRSDvsPD[1,order(unlist(res_PRSDvsPD[2,]))][1:16],nrow=4,ncol=4,top="Progression to phenograph pop")
dev.off()
excyte_res_B <- readRDS("~/projects/pbmc_ccRCC/results/validation/Bcells/2020-07-01K30_Bcells.rds")
plot_obj <- plot_excyte(excyte_res_B,alpha = 0.6,title="marker")
#plot
pdf(paste0(save_dir,Sys.Date(),"_HEATMAP",suffix,".pdf"),width = 15,height = 7)
heatmap <- plot_cluster_profile_heatmap(phenograph_obj = excyte_res_B$phenograph_obj,
display_marker_names = T,
channels_order = channels_to_use)
heatmap
dev.off()
pdf(paste0(save_dir,Sys.Date(),"_UMAP_CLUSTERS_",suffix,".pdf"),width = 10,height = 9)
plot_obj$umap_phenograph
dev.off()
png(paste0(save_dir,Sys.Date(),"_UMAP_CHANNELS_",suffix,".png"),width = 1200,height = 1200)
grid.arrange(grobs=plot_obj$umap_channels,ncol=3)
dev.off()
pdf(paste0(save_dir,Sys.Date(),"_RIDGES_ClUSTERS_",suffix,".pdf"),width = 12,height = 8)
marrangeGrob(grobs=plot_obj$ridges_clusters,ncol=2,nrow = 2)
dev.off()
pdf(paste0(save_dir,Sys.Date(),"_RIDGES_CHANNELS_",suffix,".pdf"),width = 14,height = 14)
marrangeGrob(grobs=plot_obj$ridges_channels,ncol=2,nrow = 2)
dev.off()
perc_B <- data.frame(excyte_res_B$phenograph_obj$phenograph_percentage)
colnames(perc_B) <- gsub(x = colnames(perc_B),pattern = "C",replacement = "B")
clusters <- colnames(perc_B)
# import clinical data
library(readxl)
rep_data <- as.data.frame(read_excel("/home/maxmey/projects/pbmc_ccRCC/results/validation/IGR_réponses.xlsx"))
rownames(rep_data)<- rep_data$init
found_ids <- sapply(rep_data$init,function(x) grep(pattern = x,x = rownames(perc_B)))
rownames(perc_B)[unlist(found_ids)] <- names(unlist(found_ids))
perc_B$prog <- factor(ifelse(rep_data[rownames(perc_B),"Objective Response : réponse complète ou partielle"]==1,"CR_PR","SD_PD"))
gs_melted <- na.omit(melt_df(perc_B,var_to_group = "prog"))
gs_melted[which(duplicated(gs_melted$value)),"value"] <- jitter(x=gs_melted[which(duplicated(gs_melted$value)),"value"],amount = 0.0000002)
res_PRSDvsPD<- sapply(clusters,function(x) plot_group_boxplot(gs_melted,
variable = x,
violin=T,
hide_test = F,
plot_outlier = T,
title_size = 8,
add_jitter=T,
labs=c("","","percentage")))
pdf(paste0(save_dir,Sys.Date(),"_reponse_",suffix,".pdf"),height=15,width = 15)
marrangeGrob(grobs=res_PRSDvsPD[1,order(unlist(res_PRSDvsPD[2,]))][1:16],nrow=4,ncol=4,top="Progression to phenograph pop")
dev.off()
# RNA_seq_mat <- do.call(cbind, cleaned)
# new_colnames <- gsub(pattern = "/Users/meylanmaxime/Documents/data_PhD/exhau_IMM/unziped/all_expression_files/",replacement = "",tab_files)
# new_colnames <- gsub(pattern = "_Gene.Expression.tab",replacement = "",new_colnames)
#
# #convert to num
# RNA_seq_mat <- apply(RNA_seq_mat,2, as.numeric)
# #set rownames
# rownames(RNA_seq_mat) <- tab_files_list[[1]][,1]
# colnames(RNA_seq_mat) <- new_colnames
# saveRDS(RNA_seq_mat,file = "/Users/meylanmaxime/Documents/data_PhD/exhau_IMM/exhau_IMM_rnaseq.rds")
imm_rnaseq<- readRDS("~/projects/exhau_IMM/exhau_IMM_rnaseq.rds")
imm_rnaseq
dim(imm_rnaseq)
tab_files <- list.files("~/projects/Exhau_HEGP/all_expression_tab_HEGP/",full.names = T)
tab_files
tab_files <- list.files("~/projects/Exhau_HEGP/all_expression_tab_HEGP/",full.names = T)
tab_files_list <- lapply(tab_files,function(x) read.csv2(x,sep = " ", header = F,stringsAsFactors = F,check.names = F))
cleaned <- lapply(tab_files_list,function(x) x[,2])
RNA_seq_mat <- do.call(cbind, cleaned)
new_colnames <- gsub(pattern = "~/projects/Exhau_HEGP/all_expression_tab_HEGP/",replacement = "",tab_files)
new_colnames <- gsub(pattern = "_Gene.Expression.tab",replacement = "",new_colnames)
#convert to num
RNA_seq_mat <- apply(RNA_seq_mat,2, as.numeric)
#set rownames
rownames(RNA_seq_mat) <- tab_files_list[[1]][,1]
colnames(RNA_seq_mat) <- new_colnames
RNA_seq_mat
saveRDS(RNA_seq_mat,file = "~/projects/Exhau_HEGP/exhau_HEGP_rnaseq.rds")
HEGP_rnaseq<- readRDS("~/projects/Exhau_HEGP/exhau_HEGP_rnaseq.rds")
boxplot(imm_rnaseq,outline=F)
# RNA_seq_mat <- do.call(cbind, cleaned)
# new_colnames <- gsub(pattern = "~/projects/Exhau_HEGP/all_expression_tab_HEGP/",replacement = "",tab_files)
# new_colnames <- gsub(pattern = "_Gene.Expression.tab",replacement = "",new_colnames)
#
# #convert to num
# RNA_seq_mat <- apply(RNA_seq_mat,2, as.numeric)
# #set rownames
# rownames(RNA_seq_mat) <- tab_files_list[[1]][,1]
# colnames(RNA_seq_mat) <- new_colnames
# saveRDS(RNA_seq_mat,file = "~/projects/Exhau_HEGP/exhau_HEGP_rnaseq.rds")
HEGP_rnaseq<- readRDS("~/projects/Exhau_HEGP/exhau_HEGP_rnaseq.rds")
boxplot(HEGP_rnaseq,outline=F)
tab_files <- list.files("~/projects/Exhau_HEGP/all_expression_tab_HEGP/",full.names = T)
tab_files_list <- lapply(tab_files,function(x) read.csv2(x,sep = " ", header = F,stringsAsFactors = F,check.names = F))
cleaned <- lapply(tab_files_list,function(x) x[,2])
RNA_seq_mat <- do.call(cbind, cleaned)
new_colnames <- gsub(pattern = "~/projects/Exhau_HEGP/all_expression_tab_HEGP/",replacement = "",tab_files)
new_colnames <- gsub(pattern = "_Gene.Expression.tab",replacement = "",new_colnames)
new_colnames
new_colnames <- gsub(pattern = "home/maxmey/projects/Exhau_HEGP/all_expression_tab_HEGP/",replacement = "",tab_files)
new_colnames <- gsub(pattern = "_Gene.Expression.tab",replacement = "",new_colnames)
tab_files <- list.files("~/projects/Exhau_HEGP/all_expression_tab_HEGP/",full.names = T)
tab_files_list <- lapply(tab_files,function(x) read.csv2(x,sep = " ", header = F,stringsAsFactors = F,check.names = F))
cleaned <- lapply(tab_files_list,function(x) x[,2])
RNA_seq_mat <- do.call(cbind, cleaned)
new_colnames <- gsub(pattern = "home/maxmey/projects/Exhau_HEGP/all_expression_tab_HEGP/",replacement = "",tab_files)
new_colnames <- gsub(pattern = "_Gene.Expression.tab",replacement = "",new_colnames)
new_colnames
tab_files <- list.files("~/projects/Exhau_HEGP/all_expression_tab_HEGP/",full.names = T)
tab_files_list <- lapply(tab_files,function(x) read.csv2(x,sep = " ", header = F,stringsAsFactors = F,check.names = F))
cleaned <- lapply(tab_files_list,function(x) x[,2])
RNA_seq_mat <- do.call(cbind, cleaned)
new_colnames <- gsub(pattern = "home/maxmey/projects/Exhau_HEGP/all_expression_tab_HEGP//",replacement = "",tab_files)
new_colnames <- gsub(pattern = "_Gene.Expression.tab",replacement = "",new_colnames)
new_colnames
tab_files <- list.files("~/projects/Exhau_HEGP/all_expression_tab_HEGP/",full.names = T)
tab_files_list <- lapply(tab_files,function(x) read.csv2(x,sep = " ", header = F,stringsAsFactors = F,check.names = F))
cleaned <- lapply(tab_files_list,function(x) x[,2])
RNA_seq_mat <- do.call(cbind, cleaned)
new_colnames <- gsub(pattern = "home/maxmey/projects/Exhau_HEGP/all_expression_tab_HEGP///",replacement = "",tab_files)
new_colnames <- gsub(pattern = "_Gene.Expression.tab",replacement = "",new_colnames)
new_colnames <- gsub(pattern = "_RNA",replacement = "",new_colnames)
new_colnames
tab_files <- list.files("~/projects/Exhau_HEGP/all_expression_tab_HEGP/",full.names = T)
tab_files_list <- lapply(tab_files,function(x) read.csv2(x,sep = " ", header = F,stringsAsFactors = F,check.names = F))
cleaned <- lapply(tab_files_list,function(x) x[,2])
RNA_seq_mat <- do.call(cbind, cleaned)
new_colnames <- gsub(pattern = "home/maxmey/projects/Exhau_HEGP/all_expression_tab_HEGP///",replacement = "",tab_files)
new_colnames
new_colnames <- gsub(pattern = "home/maxmey/projects/Exhau_HEGP/all_expression_tab_HEGP///",replacement = "",tab_files)
new_colnames
new_colnames <- gsub(pattern = "home/maxmey/projects/Exhau_HEGP/all_expression_tab_HEGP//",replacement = "",tab_files)
new_colnames
new_colnames <- gsub(pattern = "_RNA_Gene.Expression.tab",replacement = "",new_colnames)
new_colnames
new_colnames <- gsub(pattern = "/",replacement = "",new_colnames)
new_colnames
#convert to num
RNA_seq_mat <- apply(RNA_seq_mat,2, as.numeric)
#set rownames
rownames(RNA_seq_mat) <- tab_files_list[[1]][,1]
colnames(RNA_seq_mat) <- new_colnames
saveRDS(RNA_seq_mat,file = "~/projects/Exhau_HEGP/exhau_HEGP_rnaseq.rds")
boxplot(HEGP_rnaseq,outline=F)
y <- DGEList(HEGP_rnaseq)
# filtering
keep <- rowSums(HEGP_rnaseq>1) >= 3
y <- y[keep,]
dim(y)
y$samples$lib.size <- colSums(y$counts)
y <- calcNormFactors(y)
y$samples
plotMDS(y)
y <- estimateCommonDisp(y, verbose=TRUE)
y <- estimateTagwiseDisp(y)
plotBCV(y)
norm_counts <- y$pseudo.counts
TFH_sign <- c("TOX2","BCL6","CXCR5")
TLS <- log2(colMeans(norm_counts[get_signature("TLS"),])+1)
TFH <-log2(colMeans(norm_counts[TFH_sign,])+1)
TLS
norm_counts
get_signature("TLS")
keep
table(keep)
norm_counts <- y$pseudo.counts
TFH_sign <- c("TOX2","BCL6","CXCR5")
dim(norm_counts)
get_signature("TLS")
TLS <- log2(colMeans(norm_counts[get_signature("TLS"),])+1)
intersect(colnames(norm_counts),get_signature("TLS"))
colnames(norm_counts)
intersect(rownames(norm_counts),get_signature("TLS"))
TLS <- log2(colMeans(norm_counts[intersect(rownames(norm_counts),get_signature("TLS")),])+1)
TFH <-log2(colMeans(norm_counts[TFH_sign,])+1)
TFH <-log2(colMeans(norm_counts[intersect(rownames(norm_counts),TFH_sign),])+1)
TFH_sign
intersect(rownames(norm_counts),TFH_sign)
boxplot(norm_counts)
boxplot(norm_counts,outline=F)
HEGP_rnaseq<- readRDS("~/projects/Exhau_HEGP/exhau_HEGP_rnaseq.rds")
boxplot(HEGP_rnaseq,outline=F)
y <- DGEList(HEGP_rnaseq)
# filtering
keep <- rowSums(HEGP_rnaseq>1) >= 3
#y <- y[keep,]
dim(y)
y$samples$lib.size <- colSums(y$counts)
y <- calcNormFactors(y)
y$samples
plotMDS(y)
y <- estimateCommonDisp(y, verbose=TRUE)
y <- estimateTagwiseDisp(y)
plotBCV(y)
boxplot(norm_counts,outline=F)
norm_counts <- y$pseudo.counts
boxplot(norm_counts,outline=F)
HEGP_rnaseq<- readRDS("~/projects/Exhau_HEGP/exhau_HEGP_rnaseq.rds")
boxplot(HEGP_rnaseq,outline=F)
y <- DGEList(HEGP_rnaseq)
# filtering
keep <- rowSums(HEGP_rnaseq>1) >= 3
#y <- y[keep,]
dim(y)
y$samples$lib.size <- colSums(y$counts)
y <- calcNormFactors(y)
y$samples
plotMDS(y)
y <- estimateCommonDisp(y, verbose=TRUE)
y <- estimateTagwiseDisp(y)
plotBCV(y)
norm_counts <- y$pseudo.counts
boxplot(norm_counts,outline=F)
boxplot(HEGP_rnaseq,outline=F)
# new_colnames <- gsub(pattern = "home/maxmey/projects/Exhau_HEGP/all_expression_tab_HEGP//",replacement = "",tab_files)
# new_colnames <- gsub(pattern = "_RNA_Gene.Expression.tab",replacement = "",new_colnames)
# new_colnames <- gsub(pattern = "/",replacement = "",new_colnames)
#
# #convert to num
# RNA_seq_mat <- apply(RNA_seq_mat,2, as.numeric)
# #set rownames
# rownames(RNA_seq_mat) <- tab_files_list[[1]][,1]
# colnames(RNA_seq_mat) <- new_colnames
# saveRDS(RNA_seq_mat,file = "~/projects/Exhau_HEGP/exhau_HEGP_rnaseq.rds")
HEGP_rnaseq<- readRDS("~/projects/Exhau_HEGP/exhau_HEGP_rnaseq.rds")
boxplot(HEGP_rnaseq,outline=F)
y <- DGEList(HEGP_rnaseq)
# filtering
keep <- rowSums(HEGP_rnaseq>1) >= 3
#y <- y[keep,]
dim(y)
y$samples$lib.size <- colSums(y$counts)
y <- calcNormFactors(y)
boxplot(HEGP_rnaseq,outline=F)
boxplot(HEGP_rnaseq[keep,],outline=F)
boxplot(y$pseudo.counts[keep,],outline=F)
boxplot(y$counts,outline=F)
norm_counts <- y$pseudo.counts
boxplot(norm_counts[keep,],outline=F)
dim(norm_counts)
y$pseudo.counts
#plotMDS(y)
y <- estimateCommonDisp(y, verbose=TRUE)
y <- estimateTagwiseDisp(y)
y$pseudo.counts
boxplot(norm_counts[keep,],outline=F)
norm_counts <- y$pseudo.counts
boxplot(norm_counts[keep,],outline=F)
TFH_sign <- c("TOX2","BCL6","CXCR5")
TLS <- log2(colMeans(norm_counts[intersect(rownames(norm_counts),get_signature("TLS")),])+1)
TFH <-log2(colMeans(norm_counts[intersect(rownames(norm_counts),TFH_sign),])+1)
CXCL13 <- log2(norm_counts["CXCL13",]+1)
TLS
hist(TLS,breaks = 15)
hist(TFH,breaks = 15)
hist(CXCL13,breaks = 15)
abline(v = median(TLS_sign),col="red")
# compute signatures
mcp_scores_rnaseq[,"inflammation"] <- rowMeans(norm_counts[,get_signature("inflammation")])
mcp_scores_rnaseq[,"immunosuppression"] <- rowMeans(norm_counts[,intersect(get_signature("immunosuppression"),colnames(norm_counts))])
mcp_scores_rnaseq[,"antigen_presentation"] <-rowMeans(norm_counts[,intersect(get_signature("antigen_presentation"),colnames(norm_counts))])
# compute mcp score
mcp_scores_rnaseq<- MCPcounter::MCPcounter.estimate(log2(norm_counts+1),featuresType = "HUGO_symbols")
mcp_scores_rnaseq<- as.data.frame(t(mcp_scores_rnaseq),check.names=F)
norm_counts <- t(norm_counts)
# compute signatures
mcp_scores_rnaseq[,"inflammation"] <- rowMeans(norm_counts[,get_signature("inflammation")])
mcp_scores_rnaseq[,"immunosuppression"] <- rowMeans(norm_counts[,intersect(get_signature("immunosuppression"),colnames(norm_counts))])
mcp_scores_rnaseq[,"antigen_presentation"] <-rowMeans(norm_counts[,intersect(get_signature("antigen_presentation"),colnames(norm_counts))])
mcp_scores_rnaseq[,"macrophage_chemotactism"]<- rowMeans(norm_counts[,intersect(get_signature("macrophage_chemotactism"),colnames(norm_counts))])
mcp_scores_rnaseq[,"complement_activation"]<- rowMeans(norm_counts[,intersect(get_signature("complement_activation"),colnames(norm_counts))])
mcp_scores_rnaseq[,"TLS_signature"] <-  rowMeans(norm_counts[,intersect(get_signature("TLS"),colnames(norm_counts))])
mcp_scores_rnaseq[,"CXCL13"]<- norm_counts[,"CXCL13"]
mcp_scores_rnaseq[,"CXCR5"]<-norm_counts[,"CXCR5"]
mcp_scores_rnaseq[,"PD1"]<- norm_counts[,"PDCD1"]
mcp_scores_rnaseq[,"PD-L1"]<-norm_counts[,"CD274"]
mcp_scores_rnaseq[,"CTLA4"]<-norm_counts[,"CTLA4"]
mcp_scores_rnaseq[,"LAG3"]<-norm_counts[,"LAG3"]
mcp_scores_rnaseq[,"HAVCR2"]<-norm_counts[,"HAVCR2"]
#perform clustering
kmean <- kmeans(x = mcp_scores_rnaseq[,1:10],centers = 5,nstart = 1000)
kmean_grp_rnaseq<- kmean$cluster
mcp_scores_rnaseq$kmeans_id <- kmean_grp_rnaseq
kmean_grp_rnaseq_avg <- sapply(sort(unique(kmean_grp_rnaseq)),function(x){
mean(unlist(mcp_scores_rnaseq[mcp_scores_rnaseq$kmeans_id==x,1:10]))
})
kmean_grp_rnaseq_avg <- order(kmean_grp_rnaseq_avg)
kmean_grp_rnaseq <- match(x= kmean_grp_rnaseq,table = kmean_grp_rnaseq_avg)
kmean_grp_rnaseq <- LETTERS[kmean_grp_rnaseq]
table(kmean_grp_rnaseq)
#prepare for plotting
mcp_scores_rnaseq$kmeans_id <-  factor(kmean_grp_rnaseq)
order_ids_rnaseq <- unlist(sapply(LETTERS[1:length(kmean_grp_rnaseq)], function(x) which(x==mcp_scores_rnaseq$kmeans_id)))
kmean_grp_rnaseq <- as.data.frame(kmean_grp_rnaseq)
colnames(kmean_grp_rnaseq) <- "mcp classification"
rownames(kmean_grp_rnaseq) <- rownames(mcp_scores_rnaseq)
kmean_grp_rnaseq$`TLS IHC` <- as.character(ifelse(ihc_data_all[rownames(kmean_grp_rnaseq),"TLS."] ==1,"presence","absence"))
kmean_grp_rnaseq$`molecular subtypes` <- factor(ihc_data_all[rownames(kmean_grp_rnaseq),"GM"])
annotation_colors <- list()
annotation_colors$`mcp classification` <- c(
"A" = viridis(5)[1],
"B" = viridis(5)[2],
"C" = viridis(5)[3],
"D" = viridis(5)[4],
"E" = viridis(5)[5]
)
annotation_colors$`TLS IHC` <- c("presence" = "black",
"absence"= "lightgrey",
"NA"="darkgrey")
annotation_colors$`molecular subtypes` <- c("1"="darkblue",
"2"="lightblue",
"3"='orange',
"4"="red")
#PCA visualisation
acp <- PCA(mcp_scores_rnaseq[,1:10], scale.unit = TRUE, ncp = 5, graph = T)
#fviz_pca_var(acp, col.var = "black",axes = c(1,2))
#get_pca_ind(acp)
fviz_pca_ind (acp,
geom.ind = "point",
col.ind = mcp_scores_rnaseq$kmeans_id,
palette = viridis(6),
ellipse.type = "convex",
addEllipses = TRUE,
repel = TRUE # Évite le chevauchement de texte
)
#plot heatmap
# heatmaps of mcp + signatures
order_gaps_col_rnaseq <- c(table(mcp_scores_rnaseq$kmeans_id)[1],
table(mcp_scores_rnaseq$kmeans_id)[1]+table(mcp_scores_rnaseq$kmeans_id)[2],
table(mcp_scores_rnaseq$kmeans_id)[1]+table(mcp_scores_rnaseq$kmeans_id)[2]+table(mcp_scores_rnaseq$kmeans_id)[3],
table(mcp_scores_rnaseq$kmeans_id)[1]+table(mcp_scores_rnaseq$kmeans_id)[2]+table(mcp_scores_rnaseq$kmeans_id)[3]+table(mcp_scores_rnaseq$kmeans_id)[4])
#heatmap for RNAseq kmeans groups
a <- pheatmap(t(mcp_scores_rnaseq[order_ids_rnaseq,c(1:23)]),
color =max_palette_heatmap(100),
cluster_cols = F,
cluster_rows = F,
annotation_colors = annotation_colors,
annotation = kmean_grp_rnaseq,
gaps_row = c(10,18),
gaps_col = order_gaps_col_rnaseq,
annotation_names_col = F,
annotation_legend = T,
show_colnames = T,angle_col = 45,
scale = "row")
cbind(as.character(mcp_scores_rnaseq$kmeans_id),TLS,TFH,CXCL13)
pdf("~/projects/Exhau_HEGP/heatmap_screening.pdf")
a
dev.off()
scale = "row")
pdf("~/projects/Exhau_HEGP/heatmap_screening.pdf",width=7)
a
dev.off()
pdf("~/projects/Exhau_HEGP/heatmap_screening.pdf",width=7,height=5)
a
dev.off()
pdf("~/projects/Exhau_HEGP/heatmap_screening.pdf",width=9,height=6)
a
dev.off()
write.csv(cbind(as.character(mcp_scores_rnaseq$kmeans_id),TLS,TFH,CXCL13),file = "~/projects/Exhau_HEGP/screening_HEGH_TLS_sign.csv")
#PCA visualisation
acp <- PCA(mcp_scores_rnaseq[,1:10], scale.unit = TRUE, ncp = 5, graph = T)
#fviz_pca_var(acp, col.var = "black",axes = c(1,2))
#get_pca_ind(acp)
fviz_pca_ind (acp,
geom.ind = "point",
col.ind = mcp_scores_rnaseq$kmeans_id,
palette = viridis(6),
ellipse.type = "convex",
addEllipses = TRUE,
repel = TRUE # Évite le chevauchement de texte
)
# look for good candidates for the IMM cohort
source("~/script/maxime.utils.r")
library(DESeq2)
library(MCPcounter)
library(edgeR)
library(csaw)
library(limma)
library(HTSFilter)
# tab_files <- list.files("/Users/meylanmaxime/Documents/data_PhD/exhau_IMM/unziped/all_expression_files",full.names = T)
# tab_files_list <- lapply(tab_files,function(x) read.csv2(x,sep = " ", header = F,stringsAsFactors = F,check.names = F))
# cleaned <- lapply(tab_files_list,function(x) x[,2])
# RNA_seq_mat <- do.call(cbind, cleaned)
# new_colnames <- gsub(pattern = "/Users/meylanmaxime/Documents/data_PhD/exhau_IMM/unziped/all_expression_files/",replacement = "",tab_files)
# new_colnames <- gsub(pattern = "_Gene.Expression.tab",replacement = "",new_colnames)
#
# #convert to num
# RNA_seq_mat <- apply(RNA_seq_mat,2, as.numeric)
# #set rownames
# rownames(RNA_seq_mat) <- tab_files_list[[1]][,1]
# colnames(RNA_seq_mat) <- new_colnames
# saveRDS(RNA_seq_mat,file = "/Users/meylanmaxime/Documents/data_PhD/exhau_IMM/exhau_IMM_rnaseq.rds")
imm_rnaseq<- readRDS("~/projects/exhau_IMM/exhau_IMM_rnaseq.rds")
boxplot(imm_rnaseq,outline=F)
imm_rnaseq["CXCR5",]
order(imm_rnaseq["CXCR5",])
sort(imm_rnaseq["CXCR5",])
sort(imm_rnaseq["CXCCL13",])
sort(imm_rnaseq["CXCL13",])
dim(imm_rnaseq)
# RNA_seq_mat <- do.call(cbind, cleaned)
# new_colnames <- gsub(pattern = "/Users/meylanmaxime/Documents/data_PhD/exhau_IMM/unziped/all_expression_files/",replacement = "",tab_files)
# new_colnames <- gsub(pattern = "_Gene.Expression.tab",replacement = "",new_colnames)
#
# #convert to num
# RNA_seq_mat <- apply(RNA_seq_mat,2, as.numeric)
# #set rownames
# rownames(RNA_seq_mat) <- tab_files_list[[1]][,1]
# colnames(RNA_seq_mat) <- new_colnames
# saveRDS(RNA_seq_mat,file = "/Users/meylanmaxime/Documents/data_PhD/exhau_IMM/exhau_IMM_rnaseq.rds")
imm_rnaseq<- readRDS("~/projects/exhau_IMM/exhau_IMM_rnaseq.rds")
imm_rnaseq["CXCR5",]
summary(imm_rnaseq["CXCR5",])
install.packages("blogdown")
blogdown::install_hugo(version = "0.73.0", force = TRUE)
getwd()
